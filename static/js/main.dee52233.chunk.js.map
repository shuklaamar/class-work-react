{"version":3,"sources":["components/Loading.js","components/Display.js","components/Navbar.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Loading","Display","handlerOnclick","event","props","delete","target","id","courselist","this","coursedetails","length","map","element","class","key","title","details","onClick","React","Component","Navbar","filte","Form","state","Instructor","handleonChange","setState","value","handleSubmit","preventDefault","addcourse","className","onSubmit","htmlFor","type","placeholder","onChange","App","Coursedetails","course","Math","floor","random","toString","arr","navbar","filter","cours1","console","log","course1","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8UAWeA,EARC,WACZ,OACI,6BACI,mEC8BGC,G,kNArBXC,eAAiB,SAACC,GACd,OAAO,EAAKC,MAAMC,OAAOF,EAAMG,OAAOC,K,uDAEjC,IAAD,OACEC,EAAaC,KAAKL,MAAMM,cAAcC,OAAOF,KAAKL,MAAMM,cAAcE,KAAI,SAACC,GAC7E,OACI,yBAAKC,MAAM,iBAAiBC,IAAKF,EAAQN,IACxC,sCAAYM,EAAQG,OACpB,wCAAcH,EAAQI,SACtB,4BAAQV,GAAIM,EAAQN,GAAIW,QAAS,EAAKhB,gBAAtC,cAGH,kBAAC,EAAD,MACN,OACI,6BACKM,O,GA3BKW,IAAMC,YCebC,G,6KAdF,IAAD,OACJ,OACI,yBAAKP,MAAM,UACX,uBAAGP,GAAG,aAAaW,QAAS,WACxB,OAAO,EAAKd,MAAMkB,MAAM,eAD5B,aAGA,uBAAGf,GAAG,UAAUW,QAAS,WACrB,OAAO,EAAKd,MAAMkB,MAAM,aAD5B,gB,GAPSH,IAAMC,Y,OCuCZG,G,kNAtCXC,MAAQ,CACJjB,GAAG,EACHS,MAAM,GACNC,QAAQ,GACRQ,WAAW,I,EAGfC,eAAiB,SAACvB,GACd,EAAKwB,SAAL,eAAgBxB,EAAMG,OAAOC,GAAIJ,EAAMG,OAAOsB,S,EAElDC,aAAe,SAAC1B,GACXA,EAAM2B,iBAEP,EAAK1B,MAAM2B,UAAU,EAAKP,OAC1B,EAAKG,SAAS,CACVpB,GAAG,EACHS,MAAM,GACNC,QAAQ,GACRQ,WAAW,M,uDAIf,OACI,0BAAMO,UAAU,QAAQC,SAAUxB,KAAKoB,cACnC,2BAAOK,QAAQ,SAAf,UACA,2BAAOC,KAAK,OAAO5B,GAAG,QAAQ6B,YAAY,kBAAkBC,SAAU5B,KAAKiB,eAAgBE,MAAOnB,KAAKe,MAAMR,QAAe,6BAE5H,2BAAOkB,QAAQ,WAAf,YACA,2BAAOC,KAAK,OAAO5B,GAAG,UAAU6B,YAAY,oBAAoBC,SAAU5B,KAAKiB,eAAgBE,MAAOnB,KAAKe,MAAMP,UAAiB,6BAElI,2BAAOiB,QAAQ,cAAf,SACA,2BAAOC,KAAK,OAAO5B,GAAG,aAAa6B,YAAY,OAAOC,SAAU5B,KAAKiB,eAAgBE,MAAOnB,KAAKe,MAAMC,aAAoB,6BAC3H,4BAAQU,KAAK,SAASP,MAAM,UAA5B,e,GAjCGR,cCwDJkB,G,kNApDbd,MAAQ,CACNe,cAAe,CACZ,CAAChC,GAAG,IAAIS,MAAM,OAAOC,QAAQ,mBAAmBQ,WAAW,aAC3D,CAAClB,GAAG,IAAIS,MAAM,QAAQC,QAAQ,aAAaQ,WAAW,aACtD,CAAClB,GAAG,IAAIS,MAAM,KAAKC,QAAQ,mBAAmBQ,WAAW,aACzD,CAAClB,GAAG,IAAIS,MAAM,MAAMC,QAAQ,kBAAkBQ,WAAW,e,EAG5DM,UAAY,SAACS,GACPA,EAAOjC,GAAGkC,KAAKC,MAAoB,IAAdD,KAAKE,UAAcC,WACxC,IAAIC,EAAI,GAAD,mBAAK,EAAKrB,MAAMe,eAAhB,CAA8BC,IACrC,EAAKb,SAAS,CACdY,cAAcM,K,EAGpBC,OAAS,SAACN,GACR,IAAIK,EAAM,EAAKrB,MAAMe,cAAcQ,QAAO,SAACC,GAEzC,OAAOA,EAAOvB,aAAee,KAE/BS,QAAQC,IAAIL,GACZ,EAAKlB,SAAS,CACZY,cAAcM,K,EAIlBxC,OAAS,SAACmC,GAER,IAAIK,EAAM,EAAKrB,MAAMe,cAAcQ,QAAO,SAACI,GAEzC,OADAF,QAAQC,IAAIC,EAAQ5C,IACb4C,EAAQ5C,KAAOiC,KAExBS,QAAQC,IAAIL,GACZ,EAAKlB,SAAS,CACZY,cAAcM,K,uDAIlB,OACE,yBAAKb,UAAU,OACb,+CACA,kBAAC,EAAD,CAAQV,MAAOb,KAAKqC,SACpB,kBAAC,EAAD,CACApC,cAAeD,KAAKe,MAAMe,cAC1BlC,OAAQI,KAAKJ,SAEb,kBAAC,EAAD,CAAM0B,UAAWtB,KAAKsB,iB,GA/CZZ,IAAMC,YCMJgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.dee52233.chunk.js","sourcesContent":["import React from 'react' \r\n\r\n\r\nconst Loading = () =>{\r\n    return(\r\n        <div>\r\n            <p>Please wait we are doing something</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading;\r\n","import React from 'react'\r\nimport Loading from './Loading'\r\nimport './Display.css'\r\nclass Display extends React.Component{\r\n    // return (\r\n    //     props.coursedetails.map(element=>{\r\n    //     return(\r\n    //         <div>\r\n    //         <h3>Title :{element.title}</h3>\r\n    //         <p>Instructor :{element.Instructor}</p>  \r\n    //         <p>Details :{element.Details}</p>\r\n    //         </div>\r\n    //     )\r\n    // })\r\n    // )\r\n    handlerOnclick = (event) => {\r\n        return this.props.delete(event.target.id)\r\n    }\r\n    render(){\r\n        const courselist = this.props.coursedetails.length?this.props.coursedetails.map((element)=>{\r\n            return(\r\n                <div class=\"course-display\" key={element.id}>\r\n                 <h3>Title :{element.title}</h3>\r\n                 <h5>Details :{element.details}</h5>\r\n                 <button id={element.id} onClick={this.handlerOnclick}>Delete</button>\r\n                 </div>\r\n            )\r\n        }) : (<Loading/>)\r\n        return(\r\n            <div>\r\n                {courselist}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Display;","import React from 'react'\r\nimport './Navbar.css'\r\n\r\nclass Navbar extends React.Component{\r\n    render(){\r\n        return(\r\n            <div class=\"navbar\">\r\n            <p id=\"Gryffindor\" onClick={() => {\r\n                return this.props.filte(\"Important\")\r\n            }}>Important</p>\r\n            <p id=\"General\" onClick={() => {\r\n                return this.props.filte(\"General\")\r\n            }}>General</p>\r\n        \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Navbar;","import React, { Component } from 'react'\r\nimport './Form.css'\r\n\r\nclass Form extends Component{\r\n    state = {\r\n        id:0,\r\n        title:\"\",\r\n        details:\"\",\r\n        Instructor:\"\"\r\n    }\r\n\r\n    handleonChange = (event) => {\r\n        this.setState({[event.target.id]:event.target.value})\r\n    }\r\n    handleSubmit = (event) => {\r\n         event.preventDefault();\r\n      //  console.log(this.state);\r\n        this.props.addcourse(this.state);\r\n        this.setState({\r\n            id:0,\r\n            title:\"\",\r\n            details:\"\",\r\n            Instructor:\"\"\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <form className=\"basic\" onSubmit={this.handleSubmit}>\r\n                <label htmlFor=\"title\">Title:</label>\r\n                <input type=\"text\" id=\"title\" placeholder=\"enter you Title\" onChange={this.handleonChange} value={this.state.title}></input><br></br>\r\n\r\n                <label htmlFor=\"details\">Details:</label>\r\n                <input type=\"text\" id=\"details\" placeholder=\"enter you Details\" onChange={this.handleonChange} value={this.state.details}></input><br></br>\r\n\r\n                <label htmlFor=\"Instructor\">Tags:</label>\r\n                <input type=\"text\" id=\"Instructor\" placeholder=\"Tags\" onChange={this.handleonChange} value={this.state.Instructor}></input><br></br>\r\n                <button type=\"submit\" value=\"submit\">submit</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","import React from 'react';\nimport Display from './components/Display';\nimport Navbar from './components/Navbar';\nimport Form from './components/Form';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    Coursedetails :[\n       {id:\"1\",title:\"node\",details:\"Its a ggod thing\",Instructor:\"Important\"},\n       {id:\"2\",title:\"React\",details:\"will learn\",Instructor:\"Important\"},\n       {id:\"3\",title:\"CP\",details:\"Its a ggod thing\",Instructor:\"Important\"},\n       {id:\"4\",title:\"C++\",details:\"Will do it soon\",Instructor:\"Important\"}\n      ]\n}     \n    addcourse = (course) => {\n          course.id=Math.floor(Math.random()*100).toString();\n          let arr=[...this.state.Coursedetails,course];\n          this.setState({\n          Coursedetails:arr\n          })\n    }\n    navbar = (course) => {\n      let arr = this.state.Coursedetails.filter((cours1)=>{\n      // console.log(course);\n        return cours1.Instructor === course; \n      })\n      console.log(arr);\n      this.setState({\n        Coursedetails:arr\n      })\n    }\n\n    delete = (course) => {\n     // console.log(course)\n      let arr = this.state.Coursedetails.filter((course1)=>{\n        console.log(course1.id)\n        return course1.id !== course;\n      })\n      console.log(arr);\n      this.setState({\n        Coursedetails:arr\n      })\n    }\n  render(){\n    return (\n      <div className=\"App\">\n        <h1>Your To-Do List</h1>\n        <Navbar filte={this.navbar}/>\n        <Display\n        coursedetails={this.state.Coursedetails}\n        delete={this.delete}\n        />\n        <Form addcourse={this.addcourse}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}